# Consider all integer combinations of  a^b
#   for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2^2=4,  2^3=8,   2^4=16,  2^5=32
# 3^2=9,  3^3=27,  3^4=81,  3^5=243
# 4^2=16, 4^3=64,  4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
# How many distinct terms are in the sequence generated by  ab
#   for 2 ≤ a ≤ n and 2 ≤ b ≤ n?


def distinct_powers(n):
    a = 1
    b = 1
    list = []
    for i in range(2, n+1):
        for j in range(2, n+1):
            list.append(i**j)
    return len(sorted(set(list)))            
    



import unittest

class Test(unittest.TestCase):
    def test_1(self):
        self.assertEqual(distinct_powers(15),177)
        
    def test_2(self):
        self.assertEqual(distinct_powers(20),324)
        
    def test_3(self):
        self.assertEqual(distinct_powers(25),519)
        
    def test_4(self):
        self.assertEqual(distinct_powers(30),755)


if __name__=="__main__":
    unittest.main()

